@value colorTextPrimary, colorTextFaint, colorTextSecondary from '../styles/colors.css';
@value primary, secondary from '../styles/colors.css';
@value justifyCenter, itemsCenter from '../styles/flex.css';
@value button as buttonText from '../styles/typography.css';
@value reset from './button-reset.css';
@value fastOutSlowInShort from './curves.css';
@value shadowDef8dp from './shadow-constants.css';
@value shadow2dp from './shadows.css';

.label {
  composes: justifyCenter itemsCenter;
  composes: buttonText;
  color: colorTextPrimary;
  line-height: 36px;
  white-space: nowrap;
}

.hover {
  @nest &:not([disabled]) {
    @nest &:hover, &.focused {
      background-color: rgba(255, 255, 255, 0.08);
    }
  }
}

:global(.cardLayer) .hover:not([disabled]) {
  @nest &:hover, &.focused {
    background-color: rgba(255, 255, 255, 0.05);
  }
}

.common {
  composes: fastOutSlowInShort;
  composes: reset;
  composes: hover;
  display: inline-table;
  min-height: 36px;
  border-radius: 2px;
  text-align: center;
}


.button {
  composes: common;
  padding: 0 8px;
  margin: 6px 0;
  min-width: 88px;
}

.button[disabled] .label {
  color: colorTextFaint;
}

.primary {}
.secondary {}

.flatActive {
  @nest &:not([disabled]) {
    @nest &:active {
      background-color: rgba(255, 255, 255, 0.16);
    }
  }
}

:global(.cardLayer) .flatActive:not([disabled]) {
  @nest &:active {
    background-color: rgba(255, 255, 255, 0.10);
  }
}

.flat {
  composes: button;
  composes: flatActive;
}

.flat.primary:not([disabled]) .label {
  color: primary;
}

.flat.secondary:not([disabled]) .label {
  color: secondary;
}

.raised {
  composes: shadow2dp;
  composes: button;

  @nest &:active {
    box-shadow: shadowDef8dp;
  }
}

.raised.primary:not([disabled]) {
  background-color: primary;

  @nest &:hover {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #486dee; /* primary lightened 8% */
  }

  @nest &.focused {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #6886f1; /* primary lightened 24% */
  }

  @nest &:active {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #7893f2; /* primary lightened 32% */
  }
}

.raised.secondary:not([disabled]) {
  background-color: secondary;

  @nest & .label {
    color: rgba(0, 0, 0, 0.87);
  }

  @nest &:hover {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #fece47; /* secondary lightened 8% */
  }

  @nest &.focused {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #ffd667; /* secondary lightened 24% */
  }

  @nest &:active {
    /* TODO(marko): replace with a color() operation once that becomes available */
    background-color: #feda77; /* secondary lightened 32% */
  }
}

.raised[disabled] {
  background-color: rgba(255, 255, 255, 0.12);
  box-shadow: none;
}

:global(.cardLayer) .raised-button[disabled] {
  background-color: rgba(255, 255, 255, 0.08);
}

.iconButton {
  composes: common;
  composes: flatActive;
  border-radius: 50%;
  vertical-align: middle;
  min-height: 48px;
  width: 48px;
}

.iconButton .label {
  color: colorTextPrimary;
}

.iconButton[disabled] .label {
  color: colorTextFaint;
}
