
type CurrentUser {
	id: Int!
	"""
	The user's display name (may differ from their login name).
	"""
	name: String!
	"""
	The name the user logs in with (may differ from their display name).
	"""
	loginName: String!
	email: String!
	emailVerified: Boolean!
	acceptedPrivacyVersion: Int!
	acceptedTermsVersion: Int!
	acceptedUsePolicyVersion: Int!
	locale: String
	permissions: SbPermissions!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime




type Mutation {
	createNewsPost(post: NewsPostCreation!): NewsPost!
	updateCurrentUser(currentPassword: String!, changes: UpdateCurrentUserChanges!): CurrentUser!
	updateUserPermissions(userId: Int!, permissions: SbPermissionsInput!): SbUser!
	addRestrictedName(pattern: String!, kind: RestrictedNameKind!, reason: RestrictedNameReason!): NameRestriction!
	deleteRestrictedName(id: Int!): Int!
	testRestrictedName(name: String!): NameRestriction
}

type NameRestriction {
	id: Int!
	pattern: String!
	kind: RestrictedNameKind!
	reason: RestrictedNameReason!
	createdAt: DateTime!
	createdBy: SbUser
}

type NewsPost {
	id: UUID!
	coverImagePath: String
	title: String!
	summary: String!
	content: String!
	publishedAt: DateTime
	updatedAt: DateTime!
	author: SbUser
}

type NewsPostConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [NewsPostEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [NewsPost!]!
}

input NewsPostCreation {
	authorId: Int
	title: String!
	summary: String!
	content: String!
	publishedAt: DateTime
}

"""
An edge in a connection.
"""
type NewsPostEdge {
	"""
	The item at the end of the edge
	"""
	node: NewsPost!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	newsPosts(includeUnpublished: Boolean, after: String, before: String, first: Int, last: Int): NewsPostConnection!
	user(id: Int!): SbUser
	userByDisplayName(name: String!): SbUser
	currentUser: CurrentUser
	restrictedNames: [NameRestriction!]!
}

enum RestrictedNameKind {
	EXACT
	REGEX
}

enum RestrictedNameReason {
	PROFANITY
	RESERVED
}

type SbPermissions {
	"""
	The user ID these permissions are for. This is mainly so the client has a key for caching
	purposes, and is not generally used elsewhere.
	"""
	id: Int!
	editPermissions: Boolean!
	debug: Boolean!
	banUsers: Boolean!
	manageLeagues: Boolean!
	manageMaps: Boolean!
	manageMapPools: Boolean!
	manageMatchmakingSeasons: Boolean!
	manageMatchmakingTimes: Boolean!
	manageRallyPointServers: Boolean!
	massDeleteMaps: Boolean!
	moderateChatChannels: Boolean!
	manageNews: Boolean!
	manageBugReports: Boolean!
	manageRestrictedNames: Boolean!
}

input SbPermissionsInput {
	"""
	The user ID these permissions are for. This is mainly so the client has a key for caching
	purposes, and is not generally used elsewhere.
	"""
	id: Int!
	editPermissions: Boolean!
	debug: Boolean!
	banUsers: Boolean!
	manageLeagues: Boolean!
	manageMaps: Boolean!
	manageMapPools: Boolean!
	manageMatchmakingSeasons: Boolean!
	manageMatchmakingTimes: Boolean!
	manageRallyPointServers: Boolean!
	massDeleteMaps: Boolean!
	moderateChatChannels: Boolean!
	manageNews: Boolean!
	manageBugReports: Boolean!
	manageRestrictedNames: Boolean!
}

type SbUser {
	id: Int!
	"""
	The user's display name (may differ from their login name).
	"""
	name: String!
	permissions: SbPermissions!
}


"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateCurrentUserChanges {
	email: String
	newPassword: String
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
