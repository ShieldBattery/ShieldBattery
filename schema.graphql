"""
Any of the possible race choices after random has been resolved.
"""
scalar AssignedRace

input CreateSignupCodeInput {
	expiresAt: DateTime!
	maxUses: Int
	notes: String
}

type CurrentUser {
	id: SbUserId!
	"""
	The user's display name (may differ from their login name).
	"""
	name: String!
	"""
	The name the user logs in with (may differ from their display name).
	"""
	loginName: String!
	email: String!
	emailVerified: Boolean!
	acceptedPrivacyVersion: Int!
	acceptedTermsVersion: Int!
	acceptedUsePolicyVersion: Int!
	locale: String
	"""
	When the user last changed their login name (for rate limiting display)
	"""
	lastLoginNameChange: DateTime
	"""
	When the user last changed their display name (for rate limiting display)
	"""
	lastNameChange: DateTime
	"""
	Number of display name change tokens available
	"""
	nameChangeTokens: Int!
	permissions: SbPermissions!
	canChangeDisplayName: Boolean!
	nextDisplayNameChangeAllowedAt: DateTime
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type DisplayNameAuditEntry {
	id: UUID!
	userId: SbUserId!
	oldName: String!
	newName: String!
	changedAt: DateTime!
	changeReason: String
	userAgent: String
	sessionId: String
	usedToken: Boolean!
	changedByUser: SbUser
	ipAddress: String
}

type Game {
	id: UUID!
	startTime: DateTime!
	config: GameConfig!
	disputable: Boolean!
	disputeRequested: Boolean!
	disputeReviewed: Boolean!
	gameLength: Int
	results: [ReconciledPlayerResultEntry!]
	routes: [GameRoute!]
	map: UploadedMap!
}

union GameConfig = GameConfigDataLobby | GameConfigDataMatchmaking

type GameConfigDataLobby {
	gameType: GameType!
	gameSubType: Int!
	teams: [[GamePlayer!]!]!
	gameSourceExtra: LobbyExtra!
}

type GameConfigDataMatchmaking {
	gameType: GameType!
	gameSubType: Int!
	teams: [[GamePlayer!]!]!
	gameSourceExtra: MatchmakingExtra!
}

type GamePlayer {
	race: Race!
	isComputer: Boolean!
	user: SbUser
}

type GameRoute {
	p1: Int!
	p2: Int!
	server: Int!
	latency: Float!
}

"""
The preset game ruleset that was selected (or UMS).
"""
scalar GameType

type League {
	id: UUID!
	name: String!
	matchmakingType: MatchmakingType!
	description: String!
	signupsAfter: DateTime!
	startAt: DateTime!
	endAt: DateTime!
	badgePath: String
	imagePath: String
	rulesAndInfo: String
	link: String
}

type LobbyExtra {
	turnRate: Int
	useLegacyLimits: Boolean
}

type LoginNameAuditEntry {
	id: UUID!
	userId: SbUserId!
	oldLoginName: String!
	newLoginName: String!
	changedAt: DateTime!
	changeReason: String
	userAgent: String
	sessionId: String
	changedByUser: SbUser
	ipAddress: String
}

type MapFile {
	format: String!
	tileset: Int!
	originalName: String!
	originalDescription: String!
	slots: Int!
	umsSlots: Int!
	umsForces: [MapForce!]!
	width: Int!
	height: Int!
	isEud: Boolean!
	parserVersion: Int!
	imageVersion: Int!
	id: String!
	image256Url: String!
	image512Url: String!
	image1024Url: String!
	image2048Url: String!
}

type MapForce {
	name: String!
	teamId: Int!
	players: [MapForcePlayer!]!
}

type MapForcePlayer {
	playerId: Int!
	race: MapForcePlayerRace!
	typeId: Int!
	isComputer: Boolean!
}

"""
The race configuration for a player in a map force (either a preset race or 'any' for selectable).
"""
scalar MapForcePlayerRace

"""
The privacy level for a map. This determines who can use the map for creating games.
"""
scalar MapVisibility

interface MatchmakingExtra {
	matchmakingType: MatchmakingType!
}

type MatchmakingExtra1V1Data implements MatchmakingExtra {
	matchmakingType: MatchmakingType!
}

type MatchmakingExtra1V1FastestData implements MatchmakingExtra {
	matchmakingType: MatchmakingType!
}

type MatchmakingExtra2V2Data implements MatchmakingExtra {
	"""
	The user Ids of players in the match, grouped into lists by party. Players not in a party
	will be in a list by themselves.
	"""
	parties: [[SbUserId!]!]!
	matchmakingType: MatchmakingType!
}

"""
All of the matchmaking types that we support. These values match the enum values used in the database.
"""
scalar MatchmakingType

type Mutation {
	newsCreatePost(post: NewsPostCreation!): NewsPost!
	"""
	Sets (or clears, if message is not provided) the urgent message at the top of the home page.
	"""
	newsSetUrgentMessage(message: UrgentMessageInput): Boolean!
	userUpdateCurrent(currentPassword: String!, changes: UpdateCurrentUserChanges!): CurrentUser!
	userUpdatePermissions(userId: SbUserId!, permissions: SbPermissionsInput!): SbUser!
	userAddRestrictedName(pattern: String!, kind: RestrictedNameKind!, reason: RestrictedNameReason!): NameRestriction!
	userDeleteRestrictedName(id: Int!): Int!
	userTestRestrictedName(name: String!): NameRestriction
	createSignupCode(input: CreateSignupCodeInput!): SignupCode!
}

type NameRestriction {
	id: Int!
	pattern: String!
	kind: RestrictedNameKind!
	reason: RestrictedNameReason!
	createdAt: DateTime!
	createdBy: SbUser
}

type NewsPost {
	id: UUID!
	coverImagePath: String
	title: String!
	summary: String!
	content: String!
	publishedAt: DateTime
	updatedAt: DateTime!
	author: SbUser
}

type NewsPostConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [NewsPostEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [NewsPost!]!
}

input NewsPostCreation {
	authorId: SbUserId
	title: String!
	summary: String!
	content: String!
	publishedAt: DateTime
}

"""
An edge in a connection.
"""
type NewsPostEdge {
	"""
	The item at the end of the edge
	"""
	node: NewsPost!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	game(id: UUID!): Game
	liveGames: [Game!]!
	activeLeagues: [League!]!
	futureLeagues: [League!]!
	pastLeagues: [League!]!
	newsPosts(includeUnpublished: Boolean, after: String, before: String, first: Int, last: Int): NewsPostConnection!
	urgentMessage: UrgentMessage
	user(id: SbUserId!): SbUser
	userByDisplayName(name: String!): SbUser
	currentUser: CurrentUser
	restrictedNames: [NameRestriction!]!
	userLoginNameAuditHistory(userId: SbUserId!, limit: Int, offset: Int): [LoginNameAuditEntry!]!
	userDisplayNameAuditHistory(userId: SbUserId!, limit: Int, offset: Int): [DisplayNameAuditEntry!]!
	signupCodes(includeExhausted: Boolean): [SignupCode!]!
}

"""
Any of the possible race choices that can be selected.
"""
scalar Race

type ReconciledPlayerResult {
	apm: Int!
	race: AssignedRace!
	result: ReconciledResult!
}

type ReconciledPlayerResultEntry {
	id: SbUserId!
	result: ReconciledPlayerResult!
}

enum ReconciledResult {
	WIN
	LOSS
	DRAW
	UNKNOWN
}

enum RestrictedNameKind {
	EXACT
	REGEX
}

enum RestrictedNameReason {
	PROFANITY
	RESERVED
}

"""
A map ID in the ShieldBattery system.
"""
scalar SbMapId

type SbPermissions {
	"""
	The user ID these permissions are for. This is mainly so the client has a key for caching
	purposes, and is not generally used elsewhere.
	"""
	id: SbUserId!
	editPermissions: Boolean!
	debug: Boolean!
	banUsers: Boolean!
	manageLeagues: Boolean!
	manageMaps: Boolean!
	manageMapPools: Boolean!
	manageMatchmakingSeasons: Boolean!
	manageMatchmakingTimes: Boolean!
	manageRallyPointServers: Boolean!
	massDeleteMaps: Boolean!
	moderateChatChannels: Boolean!
	manageNews: Boolean!
	manageBugReports: Boolean!
	manageRestrictedNames: Boolean!
	manageSignupCodes: Boolean!
}

input SbPermissionsInput {
	"""
	The user ID these permissions are for. This is mainly so the client has a key for caching
	purposes, and is not generally used elsewhere.
	"""
	id: SbUserId!
	editPermissions: Boolean!
	debug: Boolean!
	banUsers: Boolean!
	manageLeagues: Boolean!
	manageMaps: Boolean!
	manageMapPools: Boolean!
	manageMatchmakingSeasons: Boolean!
	manageMatchmakingTimes: Boolean!
	manageRallyPointServers: Boolean!
	massDeleteMaps: Boolean!
	moderateChatChannels: Boolean!
	manageNews: Boolean!
	manageBugReports: Boolean!
	manageRestrictedNames: Boolean!
	manageSignupCodes: Boolean!
}

type SbUser {
	id: SbUserId!
	"""
	The user's display name (may differ from their login name).
	"""
	name: String!
	permissions: SbPermissions!
}

"""
A user ID in the ShieldBattery system.
"""
scalar SbUserId

type SignupCode {
	id: UUID!
	code: String!
	createdAt: DateTime!
	expiresAt: DateTime!
	maxUses: Int
	uses: Int!
	exhausted: Boolean!
	notes: String
	createdByUser: SbUser
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateCurrentUserChanges {
	email: String
	newPassword: String
	loginName: String
	name: String
}

type UploadedMap {
	id: SbMapId!
	name: String!
	description: String!
	uploadDate: DateTime!
	visibility: MapVisibility!
	uploader: SbUser!
	mapFile: MapFile!
}

type UrgentMessage {
	id: UUID!
	title: String!
	message: String!
	"""
	The time the message was published (in UTC). This will serialize as an RFC 3339 string.
	"""
	publishedAt: DateTime!
}

input UrgentMessageInput {
	title: String!
	message: String!
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Provides a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
