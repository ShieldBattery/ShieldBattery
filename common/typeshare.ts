/*
 Generated by typeshare 1.13.2
*/

export enum RestrictedNameReason {
  Profanity = 'profanity',
  Reserved = 'reserved',
}

export interface CheckAllowedNameResponse {
  allowed: boolean
  reason?: RestrictedNameReason
}

export interface SbPermissions {
  editPermissions: boolean
  debug: boolean
  banUsers: boolean
  manageLeagues: boolean
  manageMaps: boolean
  manageMapPools: boolean
  manageMatchmakingSeasons: boolean
  manageMatchmakingTimes: boolean
  manageRallyPointServers: boolean
  massDeleteMaps: boolean
  moderateChatChannels: boolean
  manageNews: boolean
  manageBugReports: boolean
  manageRestrictedNames: boolean
}

export interface UrgentMessage {
  id: string
  title: string
  message: string
  /** The time the message was published (in UTC). This will serialize as an RFC 3339 string. */
  publishedAt: string
}

/**
 * All of the matchmaking types that we support. These values match the enum values used in the
 * database.
 */
export enum MatchmakingType {
  Match1v1 = '1v1',
  Match1v1Fastest = '1v1fastest',
  Match2v2 = '2v2',
}

export type PublishedMessage =
  | { type: 'news'; data: PublishedNewsMessage }
  | { type: 'user'; data: PublishedUserMessage }

export type PublishedNewsMessage = { type: 'urgentMessageChanged'; data: undefined }

export type PublishedUserMessage = {
  type: 'permissionsChanged'
  data: {
    userId: TypeshareTypes.SbUserId
    permissions: SbPermissions
  }
}
