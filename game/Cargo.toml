[package]
name = "shieldbattery"
version = "0.1.0"
edition = "2018"
resolver = "2"

[lib]
name = "shieldbattery"
crate-type = ["cdylib"]

[profile.dev]
panic = "abort"

[profile.release]
debug = 1
panic = "abort"
overflow-checks = true # Only our crates; gets reverted back to true for dependencies below
lto = true

[dependencies]
arrayvec = "0.7"
backtrace = "0.3"
byteorder = "1.3.1"
bytes = "1.0"
chrono = "0.4.6"
fern = "0.6"
futures = "0.3"
fxhash = "0.2.1"
http = "0.2"
lazy_static = "1.3"
libc = "0.2.50"
log = "0.4"
once_cell = "1.5"
parking_lot = { version = "0.11", features = ["send_guard"] }
prost = "0.9"
quick-error = "2.0"
rand = "0.8"
reqwest = { version = "0.11.1", features = ["json", "rustls-tls"] }
scopeguard = "1.1"
serde = { version = "1.0.89", features = ["derive", "rc"] }
serde_json = "1.0.39"
smallvec = "1.4"
tokio = { version = "1.2", features = ["fs", "net", "rt-multi-thread", "macros", "sync", "time"] }
tokio-stream = "0.1"
tokio-tungstenite = "0.15"

[dependencies.winapi]
version = "0.3.9"
features = [
    "combaseapi", "dsound", "debugapi", "d3d11", "dxgi", "errhandlingapi", "handleapi",
    "knownfolders", "libloaderapi", "memoryapi", "processthreadsapi", "shlobj", "stringapiset",
    "synchapi", "sysinfoapi", "unknwnbase", "winuser", "wingdi", "winsock2", "winver", "ws2def",
    "ws2ipdef",
]

# Function hooking
[dependencies.whack]
git = "https://github.com/neivv/whack.git"
rev = "ccd95f5cfa37622bc3ec3d4b0974ab9b631b59b2"

# Struct declarations & convenience functions for ingame BW data
[dependencies.bw_dat]
git = "https://github.com/neivv/aise.git"
rev = "afa10eed358ab1e4322ed54e3da809e5494c2a33"

[build-dependencies]
anyhow = "1.0.33"
serde_json = "1.0.39"
prost-build = "0.9"

# -- Local helper crates --
[workspace]

[dependencies.scr-analysis]
path = "./scr-analysis"

[dependencies.compile-shaders]
path = "./compile-shaders"

[build-dependencies.compile-shaders]
path = "./compile-shaders"

# Applies to dependencies, not main / local workspace crates
[profile.release.package."*"]
# Enough dependencies have inline-heavy "fast" code that ends up being
# somewhat unideal if overflow checks are enabled and bloat things
overflow-checks = false

[profile.dev.package.scr-analysis]
# Optimize scr-analysis subcrate as its code takes quite a lot of time to run
# if not optimized (That is also the main reason for it being a separate crate)
opt-level = 2

# Same for lower level analysis crates (Not sure if samase_scarf makes difference since
# it should be 90% generic functions that end up being optimized in scr-analysis)
[profile.dev.package.samase_scarf]
opt-level = 2

[profile.dev.package.scarf]
opt-level = 2

[profile.dev.package.memmem]
opt-level = 2

# The http crate relies pretty heavily on optimizations to be usable;
# http::header::name::parse_hdr is 135 kB unoptimized, 19 kB optimized
# (Imo it either way chooses a poor tradeoff between size and performance but oh well)
[profile.dev.package.http]
opt-level = 2

# Have build dependencies (most importantly serde) be built with opt-level 2.
# In debug this should reduce time it takes to expand derive macros -- it's
# done every time the compiler is ran. I don't have pc that can get super reliable
# measurements, but it seems to shorten macro expansion phase by few seconds for me.
# I'm betting on this being worth the bit longer initial compile time when working
# on the game code a lot =)
[profile.dev.build-override]
opt-level = 2
debug = 0
overflow-checks = false

# On release, use opt-level 0 to make the code executed at build time compile faster.
# (Release doesn't need to save few seconds on rebuild after minor change)
[profile.release.build-override]
opt-level = 0
debug = 0
overflow-checks = false
