name: server-rs CI

on:
  push:
    paths:
      - '.github/workflows/server-rs-ci.yml'
      - 'common/typeshare.ts'
      - 'schema.graphql'
      - 'server-rs/**'
  pull_request:
    paths:
      - '.github/workflows/server-rs-ci.yml'
      - 'common/typeshare.ts'
      - 'schema.graphql'
      - 'server-rs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  clippy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server-rs
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./server-rs

      - name: clippy
        run: cargo clippy --all-targets --workspace -- -D warnings

  fmt:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server-rs
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: rustfmt
        run: cargo fmt --all -- --check

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server-rs
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./server-rs

      - name: cargo test
        run: cargo test --all-targets --no-fail-fast

      - name: cargo run --bin gen-schema
        id: gen-schema
        run: cargo run --bin gen-schema -- --fail-on-update

      - name: Display graphql error
        if: ${{ failure() && steps.gen-schema.conclusion == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('The generated graphql files seem outdated. Please run `pnpm gen-schema && pnpm gen-graphql` in the directory root and commit the updated files.')

  typeshare:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Using pnpm
        uses: pnpm/action-setup@v4

      - name: Using Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile

      - name: Install typeshare-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: typeshare-cli

      - name: Run typeshare
        id: gen-typeshare
        run: pnpm gen-typeshare

      - name: Get changed files
        uses: zyactions/verify-changed-files@2981a606808d0b36bdb2fbe45a50b01aa3ec601d
        id: get-changed-files
        with:
          return-pipe: true

      - name: Check typeshare
        uses: zyactions/glob@019de5a7f0ba17b700d45867086242eb99ff1a46
        id: check-typeshare
        with:
          pipe: ${{ steps.get-changed-files.outputs.pipe }}
          pattern: common/typeshare.ts

      - name: Display typeshare
        if: ${{ steps.check-typeshare.outputs.matches != '' || failure() && steps.gen-typeshare.conclusion == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            const util = require('node:util')
            const node_exec = util.promisify(require('node:child_process').exec)

            const { FILES_CHANGED, CHANGED_FILES } = process.env

            console.log(`Files changed: ${FILES_CHANGED}`)
            console.log(`Changed files: ${CHANGED_FILES}`)

            async function runGitDiff() {
              const { stdout, stderr } = await node_exec('git diff')
              console.log('stdout:', stdout)
              console.error('stderr:', stderr)
            }
            runGitDiff()

            core.setFailed('The typeshare types seem outdated. Please run "pnpm gen-typeshare" in the directory root and commit the updated files. You may need to run "cargo install typeshare-cli" to get an updated version first.')

  sqlx-prepare:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server-rs
    strategy:
      fail-fast: false
    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/shieldbattery'
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          SB_DB: shieldbattery
          SB_DB_USER: shieldbattery
          SB_DB_PASSWORD: shieldbattery
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./server-rs

      - name: Install sqlx-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: sqlx-cli

      - name: Get Postgres container ID
        id: get_postgres_id
        run: echo "CONTAINER_ID=$(docker ps --filter 'ancestor=postgres:17' --format '{{.ID}}' | head -n 1)" >> $GITHUB_ENV

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            docker exec $CONTAINER_ID pg_isready && exit 0
            sleep 1
          done
          exit 1

      - name: Copy init script into container
        run: docker cp ../deployment/appserver/db/init-scripts/20200505-create-user-and-db.sh $CONTAINER_ID:/docker-entrypoint-initdb.d/20200505-create-user-and-db.sh

      - name: Run init script in container
        run: docker exec -u postgres $CONTAINER_ID bash /docker-entrypoint-initdb.d/20200505-create-user-and-db.sh

      - name: Run migrations
        run: cargo sqlx migrate run --source ../migrations

      - name: Check sqlx prepare
        run: cargo sqlx prepare --check --workspace -- --all-targets --all-features
